{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww13960\viewh10980\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 notes W2D3\
\
rspec: core, expectation, and mocks. ignore mocks.\
\
all spec files needs require \'91rspec\'92 and \'91name\'92 of file. no .rb\
\
/lib contains actual file. /spec contains the test\
\
\'93it\'94 is basic test unit. all individual tests will go inside \'93it\'94\
\'93describe\'94 is unit of organization, gathers several \'93it\'94\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2018-01-23 at 7.55.43 PM.png \width10620 \height4920
}¬}\
\
both take strings as arguments. describe uses the name of method. #method for instance and ::method for classes\
\
describe can take constant s/b name of class or module example \'93describe Student do\'94\
\
describe can be nested, for each sub \'93describe\'94 use context\
\
\'93expect\'94 will do the work. will match value your code generates and expected value\
{{\NeXTGraphic Screen Shot 2018-01-23 at 7.58.58 PM.png \width6220 \height1500
}¬}\
\
use argument or a block to make expect\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2018-01-23 at 8.01.15 PM.png \width10260 \height3320
}¬}\
\
rspec uses variety or matchers. most common is straight equality. example \'93expect(test_value). to eq(expected_value). instead of using eq, be tests if value is same object. \
\
before block sets up context for our specs to run. use before(:each)\
use pending specs by leaving off do\'85end from it.\
\
to test class, advisable to test instance of object. define subject for this test. also can declare subject with name.$\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2018-01-23 at 8.33.09 PM.png \width4480 \height980
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2018-01-23 at 8.33.22 PM.png \width5900 \height900
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \
let defines helper objects\
be wary of order of operations. spec will not run if order is off.\
use test doubles to run tests in isolation of other classes.\
\
{{\NeXTGraphic Screen Shot 2018-01-23 at 9.29.23 PM.png \width14460 \height5380
}¬}\
\
create the double by simply calling the double method. \
\
automated testing: test driven development. Write the test first knowing what you want.\
unit tests\
integration tests\
end to end tests/ui tests.\
\
describe Dessert do\
	describe \'91#initialize\'92 do\
		it \'91takes in a type\'92 do\
\
		end\
	end	\
end\
\
to test if code raises an error: it \'93raises an error if the amount is not a number\'94 do\
	expect \{ Dessert.new(\'93brownie\'94, \'93tons\'94)\}. to raise_error (\'93amount must be an amount\'94)\
\
let is useful for additional variables that aren\'92t focal point of the test\
\
matches that are available: \
\
describe Sloth do\
	subject(:sloth) \{Sloth.new(\'91Herbert\'92)\}\
\
	describe \'91#initialize\'92 do\
		it \'91assigns a name\'92 do\
			expect(sloth.name). to eq(\'91Herbert\'92)\
		end\
	end\
end\
\
don\'92t call protected or private methods.}